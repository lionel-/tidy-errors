---
title: "Leave no error unkempt"
author: "Lionel Henry"
format:
  revealjs:
    theme: [beige, style.scss]
    center: true
    auto-stretch: false
knitr:
  opts_chunk:
    collapse: true
    comment: "#>"
    echo: TRUE
---

```{r include=FALSE}
library(tidyverse)
```


## Why take time for errors

:::: {.columns}
::: {.column width="60%"}
- Main way users interact with your software
- Often an afterthought
:::

::: {.column width="40%"}
![](error-window.png){}
:::

::::

::: {.notes}
Package developers have to deal with lots of chores:
- Unit tests
- Documentation
- Comments
- Input checking

Error reporting isn't a priority but is important nonetheless.
:::

---

:::: {.columns}

::: {.column width="60%"}
#### Principles of clarity

1. Consistency
1. Transparency
1. Relevance
1. Exhaustiveness
1. Conciseness
:::

::: {.column width="40%"}
#### Tools

- Error bullets
- Error calls
- Style formatting
- Chained errors
:::

::::

::: {.notes}
Consistency: Repetition is good. Recognisability. Style guide.
Transparency: Reveal inputs
Relevance: Where did the error fail. Fail early.
Exhaustiveness: Context matters.
Conciseness: Don't overwhelm.
:::


## Throwing with cli

- Most of the features presented here require `cli::cli_abort()`

- Wrapper around `rlang::abort()` that adds many features to assemble and format messages

- Check out the `cli` package: <https://cli.r-lib.org/>


## Style formatting (WIP)

- Introduce cli and `cli_abort()`
- Interpolation
- Style classes


# Error bullets

## Error bullets

:::: {.columns}

::: {.column width="60%"}
Be *concise*:

- Avoid paragraphs of text
- Be straight to the point

But be *exhaustive*:

- Include contextual information
- Point to external resources
:::

::: {.column width="40%"}
::: {.callout-note appearance="simple" icon=false}
::: {.my-smaller}
**Principles**

- Concision
- Exhaustiveness
:::
:::
:::

::::

---

Contextual information:

```{r, error=TRUE}
starwars[, 1:25]
```

\

Recommendation and external resource: \

```{r include=FALSE}
rlang::reset_message_verbosity("strict_lookup_var")
```
```{r message = TRUE}
var <- "height"
invisible(starwars |> select(var))
```

---

Pass a named vector as error message to create bullets

```{r error=TRUE}
cli::cli_abort(c(
  "My error message.",
  "*" = "Bullet",
  "i" = "Info bullet",
  "x" = "Cross bullet",
  "v" = "Check bullet"
))
```

---

Create named bullets programmatically with `set_names()`

```{r include=FALSE}
set.seed(5)
```

```{r error=TRUE}
# Variable length character vector
bullets <- letters[seq_len(sample(3:5))]

# Set their bullet names
bullets <- set_names(bullets, "*")

cli::cli_abort(c("My error message.", bullets))
```




## Consistency

- Error style guide
- Use "must" and "can't" phrasing
- Create and reuse input checking functions
- Use cli themes


## Transparency

- Which function failed? For which argument?
- What did you expect, what did you get?
- Reveal input type and any other relevant aspect

::: {.callout-note appearance="simple" icon=false}
::: {.my-smaller}
- See `obj_type_friendly()` and `stop_input_type()` in `compat-obj-type.R`\
  <https://github.com/r-lib/rlang/blob/main/R/compat-obj-type.R>

- See examples in `types-check.R`\
  <https://github.com/r-lib/rlang/blob/main/R/types-check.R>
:::
:::

---

From `types-check.R`\
<https://github.com/r-lib/rlang/blob/main/R/types-check.R>

```{r include=FALSE}
library(rlang)
stop_input_type <- rlang:::stop_input_type
obj_type_friendly <- rlang:::obj_type_friendly
```

```{r}
check_string <- function(x,
                         ...,
                         what = "a single string",
                         arg = caller_arg(x),
                         call = caller_env()) {
  if (!is_string(x)) {
    stop_input_type(x, what, ..., arg = arg, call = call)
  }
}

my_function <- function(my_arg) {
  check_string(my_arg)
}
```

\

```{r error=TRUE}
my_function(1)
```


## Relevance

In `check_string()` we passed `arg` and `call` arguments:

```{r error=TRUE}
my_function(my_arg = 1)
```

```{r include=FALSE}
check_string <- function(x,
                         ...,
                         what = "a single string") {
  if (!is_string(x)) {
    stop_input_type(x, what, ...)
  }
}
```

\

Here is what it would look otherwise:

```{r error=TRUE}
my_function(my_arg = 1)
```

---

```{r}
my_check_string <- function(x,
                            arg = caller_arg(x),
                            call = caller_env()) {
  if (!is_string(x)) {
    expected <- obj_type_friendly(x)
    cli::cli_abort(
      "{.arg {arg}} must be a single string, not {}",
      arg = arg,
      call = call
    )
  }
}
```

---

`my_function()`

- Failing early (esp. important with lazy evaluation)
- Pass call when failing on behalf of
